plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

repositories {
	maven {
        name "Su5ed LegacyDev Fork"
        url "https://su5ed.jfrog.io/artifactory/maven/"
    }
}

// eclipse thinks test needs resources if this is not here
// but eclipse is still broken anyway so oh well
sourceSets {
    test {
        resources.setSrcDirs([])
    }
}

import net.minecraftforge.gradle.common.tasks.SignJar
import org.apache.tools.ant.filters.ReplaceTokens

repositories {
    maven {
        url = 'https://www.cursemaven.com/'
        content {
            includeGroup "curse.maven"
        }
    }
}

version = "${mcversion}-${version}"
group = 'thecodex6824.tcresearchpatcher' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ThaumcraftResearchPatcher'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

final arch = System.getProperty("os.arch")
final needCustomNatives = arch != "x86" && arch != "i386" && arch != "x86_64" && arch != "amd64"

ext {
    if (!project.hasProperty('certFingerprint')) {
        certFingerprint = ''    
    }
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    
    runs {
        client {
            workingDirectory file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            property 'fml.coreMods.load', 'thecodex6824.tcresearchpatcher.TCResearchPatcher'
            if (needCustomNatives) {
                property 'java.library.path', ''
                environment 'nativesDirectory', "${project.getProjectDir()}/natives"
            }
            
            environment 'MC_VERSION', '1.12.2'
            
            mods {
                tcresearchpatcher {
                    source sourceSets.main
                }
            }
        }
        
        server {
            workingDirectory file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            property 'fml.coreMods.load', 'thecodex6824.tcresearchpatcher.TCResearchPatcher'
            if (needCustomNatives) {
                property 'java.library.path', ''
                environment 'nativesDirectory', "${project.getProjectDir()}/natives"
            }
            
            environment 'MC_VERSION', '1.12.2'
            
            mods {
                tcresearchpatcher {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcversion}-${forgeversion}"
    
    implementation fg.deobf('curse.maven:thaumcraft-223628:2629023')
    
    runtimeOnly 'curse.maven:baubles-227083:2518667'
    runtimeOnly 'curse.maven:jei-238222:2995897'
    runtimeOnly 'curse.maven:thaumic-jei-285492:2705304'
    runtimeOnly 'curse.maven:thaumic-augmentation-319441:3339179'

	if (needCustomNatives) {
        implementation fileTree(dir: 'natives', include: '*.jar')
    }
    
    configurations.forEach {
    	it.exclude(group: 'net.minecraftforge', module: 'mergetool')
    	it.resolutionStrategy.force 'net.minecraftforge:legacydev:0.2.4.0'
    	it.resolutionStrategy.force 'org.ow2.asm:asm-debug-all:5.2'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

task filterTokens(type: Sync) {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'apiversion', apiversion
    inputs.property 'certFingerprint', certFingerprint

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [APIVERSION: apiversion.toString(), VERSION: version.toString(), FINGERPRINT: certFingerprint.toString()])
    into "$buildDir/src/$sourceSets.main.name/$sourceSets.main.java.name"
}

compileJava.source = filterTokens.outputs

processResources {
    // required to allow file expansion later
    duplicatesStrategy = 'include'
    
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version
    inputs.property 'apiversion', apiversion
    inputs.property 'mcversion', mcversion
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version': version, 'mcversion': mcversion, 'forgeversion': forgeversion, 'forgeminversion': forgeminversion
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

javadoc {
    include 'thecodex6824/tcresearchpatcher/api/**'
}

task signJar(type: SignJar) {
    onlyIf { project.hasProperty('keyStore') }
    
    if (project.hasProperty('keyStore')) { // needed to skip gradle trying to find vars
        keyStore = project.keyStore
        alias = project.alias
        storePass = project.storePass
        keyPass = project.keyPass
        
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

jar {
    manifest {
        attributes 'FMLCorePlugin': 'thecodex6824.tcresearchpatcher.TCResearchPatcher'
        attributes 'FMLCorePluginContainsFMLMod': 'true'
    }
    
    afterEvaluate { project.getTasks().getByName('reobfJar').finalizedBy(signJar) }
}

task fixResources(type: Task) {
	doLast {
		def classpath = project.files(configurations.runtimeClasspath, project.tasks.getByName("jar").archiveFile.get().asFile)
		project.minecraft.runs.forEach {
			def t = project.tasks.getByName(it.taskName)
			if (t instanceof JavaExec) {
				t.classpath = classpath
			}
		}
	}
}

fixResources.dependsOn('jar')
project.tasks.whenTaskAdded {
	project.minecraft.runs.forEach { r ->
		if (r.getTaskName().equals(it.name)) {
			it.dependsOn('fixResources')
		}
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'javadoc'
}

task apiJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.java
    classifier = 'api'
    include 'thecodex6824/tcresearchpatcher/api/**'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

artifacts {
    archives apiJar
    archives javadocJar
    archives sourcesJar
}
